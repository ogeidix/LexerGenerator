# LEXER GENERATOR configuration file
# ---------------------------------------
# Place *first* the generic configuration
# then list your grammar.

PACKAGE:          edu.uci.ics.asterix.external.data.parser.admfast
LEXER_NAME:       AdmFastLexer
INPUT_DIR:        components/
OUTPUT_DIR:       output/

TOKENS:

BOOLEAN_CONS   = string(boolean)
INT8_CONS      = string(int8)
INT16_CONS     = string(int16)
INT32_CONS     = string(int32)
INT64_CONS     = string(int64)
FLOAT_CONS     = string(float)
DOUBLE_CONS    = string(double)
DATE_CONS      = string(date)
DATETIME_CONS  = string(datetime)
DURATION_CONS  = string(duration)
STRING_CONS    = string(string)
POINT_CONS     = string(point)
POINT3D_CONS   = string(point3d)
LINE_CONS      = string(line)
POLYGON_CONS   = string(polygon)
RECTANGLE_CONS = string(rectangle)
CIRCLE_CONS    = string(circle)
TIME_CONS      = string(time)

NULL_LITERAL   = string(null)
TRUE_LITERAL   = string(true)
FALSE_LITERAL  = string(false)

CONSTRUCTOR_OPEN     = char(()
CONSTRUCTOR_CLOSE    = char())
START_RECORD         = char({)
END_RECORD           = char(})
COMMA                = char(\,)
COLON                = char(:)
START_ORDERED_LIST   = char([)
END_ORDERED_LIST     = char(])
START_UNORDERED_LIST = string({{)
END_UNORDERED_LIST   = string(}})

STRING_LITERAL       = char("), anythingUntil(")

INT_LITERAL          = signOrNothing(), digitSequence()
INT8_LITERAL         = token(INT_LITERAL), string(i8)
INT16_LITERAL        = token(INT_LITERAL), string(i16)
INT32_LITERAL        = token(INT_LITERAL), string(i32)
INT64_LITERAL        = token(INT_LITERAL), string(i64)

@EXPONENT            = caseInsensitiveChar(e), signOrNothing(), digitSequence()

DOUBLE_LITERAL		 = signOrNothing(), char(.), digitSequence()
DOUBLE_LITERAL		 = signOrNothing(), digitSequence(), char(.), digitSequence()
DOUBLE_LITERAL		 = signOrNothing(), digitSequence(), char(.), digitSequence(), token(@EXPONENT)
DOUBLE_LITERAL		 = signOrNothing(), digitSequence(), token(@EXPONENT)

FLOAT_LITERAL		 = token(DOUBLE_LITERAL), caseInsensitiveChar(f)

@TIMEZONE            = char(Z)
@TIMEZONE            = sign(), digitSequence(), char(:), digitSequence()
@TIMEZONE            = nothing()

TIME_LITERAL 		 = digitSequence(), char(:), digitSequence(), char(:), digitSequence(), token(@TIMEZONE)
TIME_LITERAL 		 = digitSequence(), char(:), digitSequence(), char(:), digitSequence(), char(:), digitSequence(), token(@TIMEZONE) 

DATE_LITERAL         = charOrNothing(-), digitSequence(), char(-), digitSequence(), char(-), digitSequence(), token(@TIMEZONE)

@DATETIME_PARTIAL    = charOrNothing(-), digitSequence(), char(-), digitSequence(), char(-), digitSequence(), char(T), digitSequence(), char(:), digitSequence(), char(:), digitSequence()
DATETIME_LITERAL     = token(@DATETIME_PARTIAL), token(@TIMEZONE) 
DATETIME_LITERAL     = token(@DATETIME_PARTIAL), char(:), digitSequence(), token(@TIMEZONE) 

@DURATION_DATE_PART  = digitSequence(), char(Y)
@DURATION_DATE_PART  = digitSequence(), char(M)
@DURATION_DATE_PART  = digitSequence(), char(D)
@DURATION_DATE_PART  = nothing()

@DURATION_TIME_PART  = digitSequence(), char(H)
@DURATION_TIME_PART  = digitSequence(), char(M)
@DURATION_TIME_PART  = digitSequence(), char(S)
@DURATION_TIME_PART  = nothing()

@DURATION_PARTIAL    = charOrNothing(-), char(D), token(@DURATION_DATE_PART), token(@DURATION_DATE_PART), token(@DURATION_DATE_PART)
DURATION_LITERAL     = token(@DURATION_PARTIAL)
DURATION_LITERAL     = token(@DURATION_PARTIAL), char(T), token(@DURATION_TIME_PART), token(@DURATION_TIME_PART), token(@DURATION_TIME_PART)

POINT_LITERAL      = char(P), token(DOUBLE_LITERAL), char(\,), token(DOUBLE_LITERAL)
CIRCLE_LITERAL     = token(POINT_LITERAL), char(R), token(DOUBLE_LITERAL)
POINT3D_LITERAL    = token(POINT_LITERAL), char(\,), token(DOUBLE_LITERAL)
LINE_LITERAL       = token(POINT_LITERAL), token(POINT_LITERAL)
RECTANGLE_LITERAL  = token(POINT_LITERAL), token(POINT_LITERAL), token(POINT_LITERAL)
# POLYGON_LITERAL    = token(POINT_LITERAL), token(POINT_LITERAL), tokenAndAgain(POINT_LITERAL)